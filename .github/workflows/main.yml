name: Deploy serverless to AWS

on:
  push:
    branches:
      - master

jobs:
  publish-models-package:
    name: publish models package
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup .NET 6
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
      
    - name: Build models project and generate NuGet package
        run: cd ./KpiSchedule.Api.Models && dotnet build -c Release

    - name: Push generated package to NuGet.org
        run: dotnet nuget push ./KpiSchedule.Api.Models/bin/Release/*.nupkg --skip-duplicate --no-symbols -k ${{ secrets.NUGET_API_KEY }} -s ${{ secrets.NUGET_URL }}
  
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup .NET 6
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x  
        
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install AWS Lambda tools for dotnet CLI
      run: dotnet tool install -g Amazon.Lambda.Tools
      
    - name: Build deployment package
      run: cd ./KpiSchedule.Api && dotnet lambda package -c Release -f net6.0 -o bin/deploy-package.zip
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        role-to-assume: arn:aws:iam::251999958052:role/kpi-schedule-github-actions-role
        aws-region: eu-central-1
    
    - name: serverless deploy
      uses: serverless/github-action@v3.1
      with:
        args: |
          -c 
          "cd ./KpiSchedule.Api &&
          serverless plugin install -n serverless-domain-manager &&
          serverless plugin install -n serverless-prune-plugin &&
          serverless plugin install -n serverless-plugin-log-retention &&
          serverless deploy --param="botToken=${{ secrets.TELEGRAM_BOT_TOKEN }}" --param="jwtKey=${{ secrets.JWT_SECRET }}"
        entrypoint: /bin/sh
